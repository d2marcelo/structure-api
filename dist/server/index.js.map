{"version":3,"sources":["../../src/server/index.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAAS,eAAT,CAAyB,GAAzB,EAA8B,GAA9B,EAAmC,IAAnC,EAAyC;AACvC,MAAI,YAAJ,CAAiB,cAAjB;AACA;AACD;;IAEK,e;AAEJ,6BAA0B;AAAA,QAAd,OAAc,yDAAJ,EAAI;AAAA;;;AAExB,SAAK,MAAL,GAAc,wBAAd;;AAEA,SAAK,MAAL,CAAY,GAAZ,CAAgB,2BAAY,eAAK,IAAL,CAAU,SAAV,EAAqB,WAArB,CAAZ,CAAhB;AACA,SAAK,MAAL,CAAY,GAAZ,CAAgB,qBAAW,UAAX,CAAsB,EAAC,UAAU,IAAX,EAAtB,CAAhB;AACA,SAAK,MAAL,CAAY,GAAZ,CAAgB,qBAAW,IAAX,CAAgB,EAAC,QAAQ,KAAT,EAAhB,CAAhB;AACA,SAAK,MAAL,CAAY,GAAZ,CAAgB,eAAhB;AACA,QAAG,QAAQ,GAAR,CAAY,QAAZ,IAAwB,MAA3B,EAAmC;AACjC,WAAK,MAAL,CAAY,GAAZ,CAAgB,KAAK,cAArB;AACD;;;AAIF;;;;gCAEW;AACV,UAAI,KAAJ;AAAA,UAAW,SAAS,EAApB;;AAEA,WAAK,MAAL,CAAY,OAAZ,CAAoB,KAApB,CAA0B,OAA1B,CAAkC,UAAS,UAAT,EAAqB;AACrD,YAAG,WAAW,KAAd,EAAqB;AACnB,iBAAO,IAAP,CAAY,WAAW,KAAvB;AACD,SAFD,MAEO,IAAG,WAAW,IAAX,KAAoB,QAAvB,EAAiC;;AACtC,qBAAW,MAAX,CAAkB,KAAlB,CAAwB,OAAxB,CAAgC,UAAS,OAAT,EAAkB;AAChD,oBAAQ,QAAQ,KAAhB;AACA,qBAAS,OAAO,IAAP,CAAY,KAAZ,CAAT;AACD,WAHD;AAID;AACF,OATD;;AAWA,aAAO,MAAP;AACD;;;iCAEY;AACX,cAAQ,UAAR,EAAoB,KAAK,MAAzB;AACD;;;mCAEc,G,EAAK,G,EAAK,I,EAAM;;AAE7B,qBAAO,IAAP,CAAY,IAAI,MAAhB,EAAwB,IAAI,WAA5B;AACA;AAED;;;4BAEO;AACN,WAAK,MAAL,GAAc,KAAK,MAAL,IAAe,qBAAW;AACtC,oBAAY,0BAD0B;AAEtC,gBAAQ,KAAK;AAFyB,OAAX,CAA7B;;AAKA,WAAK,MAAL,GAAc,KAAK,MAAL,CAAY,MAAZ,CAAmB,QAAQ,GAAR,CAAY,YAA/B,CAAd;AAED;;;2BAEM;;AAEL,uBAAE,aAAF,GAAkB,KAAlB;AACA,WAAK,MAAL,CAAY,KAAZ;AAED;;;0BAEK;;AAEJ,WAAK,MAAL,CAAY,GAAZ,CAAgB,KAAhB,CAAsB,KAAK,MAA3B,EAAmC,SAAnC;AAED;;;;;AAIH,OAAO,OAAP,GAAiB,eAAjB","file":"index.js","sourcesContent":["import bodyParser      from 'body-parser'\nimport {chalk, logger} from '../lib/logger'\nimport Dispatcher      from './dispatcher'\nimport express         from 'express'\nimport path            from 'path'\nimport r               from '../lib/database/driver'\nimport Router          from './router'\nimport serveStatic     from 'serve-static'\n\nfunction removePoweredBy(req, res, next) {\n  res.removeHeader('X-Powered-By')\n  next()\n}\n\nclass StructureServer {\n\n  constructor(options = {}) {\n\n    this.server = express()\n\n    this.server.use(serveStatic(path.join(__dirname, '../public')))\n    this.server.use(bodyParser.urlencoded({extended: true}))\n    this.server.use(bodyParser.json({strict: false}))\n    this.server.use(removePoweredBy)\n    if(process.env.NODE_ENV != 'test') {\n      this.server.use(this.logRequestInfo)\n    }\n\n    //this.loadRoutes()\n\n  }\n\n  getRoutes() {\n    var route, routes = []\n\n    this.server._router.stack.forEach(function(middleware) {\n      if(middleware.route) {\n        routes.push(middleware.route)\n      } else if(middleware.name === 'router') { // router middleware\n        middleware.handle.stack.forEach(function(handler) {\n          route = handler.route\n          route && routes.push(route)\n        })\n      }\n    })\n\n    return routes\n  }\n\n  loadRoutes() {\n    require('./routes')(this.server)\n  }\n\n  logRequestInfo(req, res, next) {\n\n    logger.info(req.method, req.originalUrl)\n    next()\n\n  }\n\n  start() {\n    this.router = this.router || new Router({\n      dispatcher: new Dispatcher(),\n      server: this.server\n    })\n\n    this.server = this.server.listen(process.env.EXPRESS_PORT)\n\n  }\n\n  stop() {\n\n    r.getPoolMaster().drain()\n    this.server.close()\n\n  }\n\n  use() {\n\n    this.server.use.apply(this.server, arguments)\n\n  }\n\n}\n\nmodule.exports = StructureServer\n"]}