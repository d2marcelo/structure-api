{"version":3,"sources":["../../src/server/router.js"],"names":[],"mappings":"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","file":"router.js","sourcesContent":["import {chalk, logger}   from '../lib/logger'\nimport cors              from 'cors'\nimport multer            from 'multer'\nimport storageAdaptors   from './storageAdaptors'\n\nimport App               from '../controllers/applications'\nimport Auth              from '../controllers/auth'\nimport Bucket            from '../controllers/buckets'\nimport DigitalAsset      from '../controllers/digital-assets'\nimport Document          from '../controllers/documents'\nimport DocumentRevision  from '../controllers/document-revisions'\nimport Field             from '../controllers/fields'\nimport Org               from '../controllers/organizations'\nimport Registry          from '../controllers/registry'\nimport Taxonomy          from '../controllers/taxonomies'\nimport Template          from '../controllers/templates'\nimport TemplateRevision  from '../controllers/template-revisions'\nimport User              from '../controllers/users'\n\nconst Controllers = [App, Auth, Bucket, DigitalAsset, Document, DocumentRevision, Field, Org, Registry, Taxonomy, Template, TemplateRevision, User]\n\nvar upload = multer({storage: storageAdaptors.disk.adaptor}).any()\n\nclass Router {\n\n  constructor(options = {}) {\n    this.options     = options\n\n    this.Controllers = this.options.Controllers || Controllers\n    this.dispatcher  = this.options.dispatcher\n\n    this.routes      = options.routes\n    this.server      = options.server\n    //this.structRoute()\n    this.loadRoutes()\n    this.generateRoutesFromNodes()\n\n  }\n\n  generateRoutesFromNodes() {\n    var server  = this.server,\n        version = `v${process.env.API_VERSION}`\n\n    /*\n    TODO:\n    Make this a simple on/off flag\n    */\n    server.use(cors())\n\n    /*\n    TODO: build middleware to handle the extra routes needed per respective node(s)\n    */\n    var digitalAsset = new DigitalAsset()\n\n    server.get(`/api/${version}/digital-assets/embeds/:type/:url(*)`,  this.dispatcher.dispatch(new DigitalAsset(), 'fetchEmbed'))\n    server.get(`/api/${version}/digital-assets/:id/view`,              digitalAsset.view.bind(digitalAsset))\n    server.get(`/api/${version}/registry/settings/:name`,              this.dispatcher.dispatch(new Registry(), 'getSettingsByName'))\n\n    server.post(`/api/${version}/auth/login`,                          this.dispatcher.dispatch(new Auth(), 'login'))\n    server.post(`/api/${version}/auth/user/facebook`,                  this.dispatcher.dispatch(new Auth(), 'authByFacebook'))\n\n    server.put(`/api/${version}/digital-assets`,                       [upload, this.dispatcher.dispatch(new DigitalAsset(), 'create')])\n\n    this.Controllers.forEach( (Controller) => {\n      var controller = new Controller(),\n          routeName  = controller.name\n\n      server.get(`/api/${version}/${routeName}/:id`,                    this.dispatcher.dispatch(controller, 'getById'))\n      server.get(`/api/${version}/${routeName}`,                        this.dispatcher.dispatch(controller, 'getAll'))\n\n      server.post(`/api/${version}/${routeName}/:id`,                   this.dispatcher.dispatch(controller, 'update'))\n\n      server.put(`/api/${version}/${routeName}`,                        this.dispatcher.dispatch(controller, 'create'))\n\n      server.delete(`/api/${version}/${routeName}/:id`,                 this.dispatcher.dispatch(controller, 'delete'))\n    })\n\n  }\n\n  loadRoutes() {\n    this.routes.call(this, this.server)\n  }\n\n  structRoute() {\n    var server = this.server\n\n    var mapper = {\n      buckets: {\n        Node: 'bucket'\n      }\n    }\n\n    server.post(`/api/struct`, (req, res, next) => {\n\n      /* Example Query:\n      buckets: {\n        fields: ['data', 'desc', 'id', 'sid', 'title'],\n        id: 12345\n      }\n      */\n      var query = req.body.query\n\n      var fetch = {}\n\n      Object.keys(query).forEach( async (k, i) => {\n        var o = query[k]\n\n        var node = require(`../../nodes/${mapper[k].Node}`).default\n\n        /*\n        TODO: pluck the values instead of returning all the values\n        */\n        if(o.id) {\n          fetch[k] = await node.getById(o.id)\n        }\n\n        else {\n          fetch[k] = await node.getAll()\n        }\n\n      })\n\n      res.status(200).json({\n        pkg: fetch,\n        status: 200\n      })\n    })\n  }\n\n}\n\nexport default Router\n"]}