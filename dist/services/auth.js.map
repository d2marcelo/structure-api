{"version":3,"sources":["../../src/services/auth.js"],"names":[],"mappings":"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","file":"auth.js","sourcesContent":["import async           from 'async'\nimport {chalk, logger} from '../lib/logger'\nimport PasswordService from './password'\nimport TokenService    from './token'\nimport UserModel       from '../models/user'\n\nclass AuthService {\n\n  authenticateById(id, password, cb) {\n\n    var passwordService = new PasswordService(),\n        userModel       = new UserModel()\n\n    userModel.get(id, function AuthService_authenticateGetCallback(err, user) {\n\n      if(err) {\n        return cb({\n          message: 'Could not get user: ' + id,\n          resource: 'AuthService'\n        })\n      }\n\n      passwordService.verify(password, user.hash, function(err, verified) {\n\n        if(err) {\n          return cb({\n            message: 'Could not verify password for user: ' + id,\n            resource: 'AuthService'\n          })\n        }\n\n        cb(null, user)\n\n      })\n\n    })\n\n  }\n\n  authenticateByUsername(username, password, cb) {\n\n    var passwordService = new PasswordService(),\n        userModel       = new UserModel()\n\n    userModel.getByUsername(username, function AuthService_authenticateGetCallback(err, user) {\n\n      if(err) {\n        logger.error('Could not get user', username)\n        return cb({\n          message: 'Could not get user: ' + username,\n          resource: 'AuthService'\n        })\n      }\n\n      passwordService.verify(password, user.hash, function(err, verified) {\n\n        if(err) {\n          logger.error('Could not validate password for user', username)\n          return cb({\n            message: 'Could not verify password for user: ' + username,\n            resource: 'AuthService'\n          })\n        }\n        logger.debug('auth by user/pass its ok', user)\n        cb(null, user)\n\n      })\n\n    })\n\n  }\n\n  authorize(id, token, cb) {\n\n    var tokenService = new TokenService()\n\n    tokenService.verify(token, function(err, verified) {\n\n      if(err) {\n        return cb({\n          message: 'Could not authorize user: ' + id,\n          resource: 'AuthService'\n        })\n      }\n\n      cb(null, token)\n\n    })\n\n  }\n\n  loginById(id, pkg = {}, cb) {\n    var _this = this\n\n    if(arguments.length == 2) {\n      pkg = arguments[0]\n      id  = pkg.id\n      cb  = arguments[1]\n    }\n\n    var tokenService = new TokenService()\n\n    async.parallel([\n      this.authenticateById.bind(this, id, pkg.password),\n      tokenService.issue.bind(tokenService, pkg.hash)\n    ], function AuthService_loginByIdCallBack(err, res) {\n      logger.debug('hit parallel call')\n      if(err) {\n        logger.error('Could not log in user', id)\n        logger.error(err)\n\n        return cb({\n          message: 'Could not log in user',\n          resource: 'AuthService'\n        })\n      }\n\n      var user = res[0]\n      user.token = res[1]\n\n      cb(null, user)\n\n    })\n\n  }\n\n  loginByUsername(username, pkg = {}, cb) {\n    var _this = this\n\n    if(arguments.length == 2) {\n      pkg       = arguments[0]\n      username  = pkg.username\n      cb        = arguments[1]\n    }\n\n    var tokenService = new TokenService()\n\n    async.parallel([\n      this.authenticateByUsername.bind(this, username, pkg.password),\n      //tokenService.issue.bind(tokenService, pkg.hash)\n    ], function AuthService_loginByUsernameCallBack(err, res) {\n\n      if(err) {\n        logger.error('Could not log in user', username)\n        logger.error(err)\n\n        return cb({\n          message: 'Could not log in user',\n          resource: 'AuthService'\n        })\n      }\n\n      var user = res[0]\n      //user.token = res[1]\n\n      cb(null, user)\n\n    })\n\n  }\n\n  logout() {\n\n  }\n\n  unauthenticate() {\n\n  }\n\n}\n\nexport default AuthService\n"]}