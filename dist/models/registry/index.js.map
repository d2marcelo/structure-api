{"version":3,"sources":["../../../src/models/registry/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;IAEM,a;;;AAEJ,2BAA0B;AAAA,QAAd,OAAc,yDAAJ,EAAI;AAAA;AAAA,kHAClB,sBAAc,EAAd,EAAkB;AACtB,YAAM,UADgB;;AAGtB,mBAAa;AACX,gBAAS,CAAC,OAAD,CADE;AAEX,gBAAS,CAAC,OAAD,CAFE;AAGX,cAAS,CAAC,cAAD,CAHE;AAIX,iBAAS,CAAC,OAAD,CAJE;AAKX,gBAAS,CAAC,OAAD;AALE,OAHS;AAUtB,iBAAW;AACT,mBAAW,CACT;AACE,gBAAM,cADR;AAEE,sBAAY,IAFd;AAGE,sBAAY,cAHd;AAIE,oBAAU;AAJZ,SADS,CADF;AAST,iBAAS,CACP;AACE,gBAAM,QADR;AAEE,sBAAY,IAFd;AAGE,sBAAY,SAHd;AAIE,oBAAU;AAJZ,SADO;AATA,OAVW;AA4BtB,cAAQ;AACN,cAAM;AACJ,gBAAM;AADF,SADA;AAIN,eAAO;AACL,gBAAM;AADD;AAJD;AA5Bc,KAAlB,EAoCH,OApCG,CADkB;AAsCzB;;;;2BAEM,G,EAAK;AACV,aAAO,sBAAa,UAAC,OAAD,EAAU,MAAV,EAAqB,CAIxC,CAJM,CAAP;AAKD;;;6BAEQ;AAAA;;AAEP,aAAO;AAAA,6EAAa,iBAAO,OAAP,EAAgB,MAAhB;AAAA,cAEd,KAFc,EAKd,GALc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEA,eAAM,SAAN,CAAgB,MAAhB,CAAuB,IAAvB,QAFA;;AAAA;AAEd,uBAFc;;AAGlB,0BAAQ,MAAM,MAAN,CAAa,mBAAS,KAAtB,CAAR;;AAEI,qBALc,GAKR;AACR,8BAAU,EADF;AAER,4BAAQ,EAFA;AAGR,6BAAS;AAHD,mBALQ;;;AAWlB,wBAAM,OAAN,CAAe,UAAC,IAAD,EAAU;AACvB,4BAAO,KAAK,IAAZ;AACE,2BAAK,SAAL;AACE,4BAAI,QAAJ,CAAa,IAAb,CAAkB,IAAlB;AACA;AACF,2BAAK,OAAL;AACE,4BAAI,MAAJ,CAAW,IAAX,CAAgB,IAAhB;AACA;AACF,2BAAK,QAAL;AACE,4BAAI,OAAJ,CAAY,IAAZ,CAAiB,IAAjB;AACA;AATJ;AAWD,mBAZD;;AAcA,0BAAQ,GAAR;;AAzBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAb;AAAA;AAAA;AAAA;AAAA,UAAP;AA6BD;;;sCAEiB,G,EAAK;;AAErB,aAAO,sBAAa,UAAC,OAAD,EAAU,MAAV,EAAqB;;AAEvC,YAAI;AACF,cAAI,iBAAiB,QAAQ,IAAI,MAAJ,CAAW,IAAnB,EAAyB,OAAzB,CAAiC,QAAtD;AACA,kBAAQ,cAAR;AACD,SAHD,CAIA,OAAM,CAAN,EAAS;AACP,iBAAO,CAAP;AACD;AAEF,OAVM,CAAP;AAYD;;;;;kBAIY,a","file":"index.js","sourcesContent":["import {chalk, logger} from '../../lib/logger'\nimport registry        from '../../lib/registry'\nimport Model           from '../root'\nimport r               from '../../lib/database/driver'\n\nclass RegistryModel extends Model {\n\n  constructor(options = {}) {\n    super(Object.assign({}, {\n      name: 'registry',\n\n      permissions: {\n        create:  ['admin'],\n        delete:  ['admin'],\n        read:    ['organization'],\n        replace: ['admin'],\n        update:  ['admin'],\n      },\n      relations: {\n        belongsTo: [\n          {\n            Node: 'Organization',\n            foreignKey: 'id',\n            localField: 'organization',\n            localKey: 'organizationId'\n          },\n        ],\n        hasMany: [\n          {\n            Node: 'Plugin',\n            foreignKey: 'id',\n            localField: 'plugins',\n            localKey: 'pluginIds'\n          },\n        ]\n      },\n      schema: {\n        desc: {\n          type: 'string'\n        },\n        title: {\n          type: 'string'\n        }\n      }\n    }, options))\n  }\n\n  create(req) {\n    return new Promise( (resolve, reject) => {\n\n\n\n    })\n  }\n\n  getAll() {\n\n    return new Promise( async (resolve, reject) => {\n\n      var items = await Model.prototype.getAll.call(this)\n      items = items.concat(registry.items)\n\n      var pkg = {\n        adaptors: [],\n        fields: [],\n        plugins: []\n      }\n\n      items.forEach( (item) => {\n        switch(item.type) {\n          case 'adaptor':\n            pkg.adaptors.push(item)\n            break\n          case 'field':\n            pkg.fields.push(item)\n            break\n          case 'plugin':\n            pkg.plugins.push(item)\n            break\n        }\n      })\n\n      resolve(pkg)\n\n    })\n\n  }\n\n  getSettingsByName(req) {\n\n    return new Promise( (resolve, reject) => {\n\n      try {\n        var pluginSettings = require(req.params.name).default.settings\n        resolve(pluginSettings)\n      }\n      catch(e) {\n        reject(e)\n      }\n\n    })\n\n  }\n\n}\n\nexport default RegistryModel\n"]}