{"version":3,"sources":["../../../src/models/template/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import {chalk, logger}  from '../../lib/logger'\nimport Model            from '../root'\nimport r                from '../../lib/database/driver'\nimport TemplateRevision from '../template-revision'\n\nclass TemplateModel extends Model {\n\n  constructor(options = {}) {\n    super(Object.assign({}, {\n      name: 'templates',\n\n      permissions: {\n        create:  ['admin'],\n        delete:  ['admin'],\n        read:    ['organization'],\n        replace: ['admin'],\n        update:  ['admin'],\n      },\n      relations: {\n        belongsTo: {\n          Node: 'Organization',\n          foreignKey: 'id',\n          localField: 'organization',\n          localKey: 'organizationId'\n        }\n      },\n      schema: {\n        desc: {\n          type: 'string'\n        },\n        fields: {\n          type: 'array'\n        },\n        title: {\n          type: 'string'\n        }\n      }\n    }, options))\n  }\n\n  getAll() {\n    return new Promise( async (resolve, reject) => {\n\n      var docs = await Model.prototype.getAll.call(this),\n          docsResolved = []\n\n      docs.forEach( (doc) => {\n        docsResolved.push(this.getActiveRevision(doc).then( (revision) => {\n          return Object.assign(doc, {\n            fields: revision.fields,\n            title: revision.title\n          })\n        }))\n      })\n\n      Promise.all(docsResolved)\n        .then( (docs) => {\n          resolve(docs)\n        })\n\n    })\n  }\n\n  getById(req) {\n    var id = (typeof req == 'string') ? req : req.params.id\n\n    return new Promise( async (resolve, reject) => {\n\n      var doc = await Model.prototype.getById.call(this, id)\n\n      if(!doc.id) {\n        logger.error('Could not get template', id)\n        return reject(doc)\n      }\n\n      var revision = await this.getActiveRevision(doc)\n\n      Object.assign(doc, {\n        fields: revision.fields,\n        title: revision.title\n      })\n\n      return resolve(doc)\n\n    })\n\n  }\n\n  getActiveRevision(doc) {\n\n    return new Promise( async (resolve, reject) => {\n\n      if(!doc.activeRevisionId) return resolve({\n        fields: [],\n        title: doc.title\n      })\n\n      var revision = await new TemplateRevision().getById(doc.activeRevisionId)\n\n      if(!revision.id) {\n        logger.error('Could not get template revision for', doc.id)\n        return reject(revision)\n      }\n\n      resolve(revision)\n\n    })\n\n  }\n\n}\n\nexport default TemplateModel\n"]}