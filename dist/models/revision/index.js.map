{"version":3,"sources":["../../../src/models/revision/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import {chalk, logger} from '../../lib/logger'\nimport DigitalAsset    from '../digital-asset'\nimport Model           from '../root'\nimport r               from '../../lib/database/driver'\n\nclass RevisionModel extends Model {\n\n  constructor(options = {}) {\n    super(Object.assign({}, {\n      name: 'revisions',\n\n      permissions: {\n        create:  ['user'],\n        delete:  ['admin'],\n        read:    ['organization'],\n        replace: ['admin'],\n        update:  ['user'],\n      },\n      relations: {\n        belongsTo: [\n          {\n            Node: 'Document',\n            foreignKey: 'id',\n            localField: 'document',\n            localKey: 'documentId'\n          }\n        ]\n      },\n      schema: {\n        desc: {\n          type: 'string'\n        },\n        title: {\n          type: 'string'\n        }\n      }\n    }, options))\n  }\n\n  getAll(req) {\n\n    return new Promise( (resolve, reject) => {\n\n      Model.prototype.getAll.call(this)\n        .then( (revisions) => {\n\n          var resolvedRevisions = []\n          revisions.forEach( (revision) => {\n            resolvedRevisions.push(this.resolveFields(revisions))\n          })\n\n          Promise.all(resolvedRevisions)\n            .then( (revisions) => {\n              resolve(revisions)\n            })\n            .catch( (err) => {\n              logger.error('Error resolving revisions', err)\n              reject(err)\n            })\n        })\n        .catch( (err) => {\n          logger.error('Could not get revisions', err)\n        })\n\n    })\n\n  }\n\n  getById(req) {\n    var id = (typeof req == 'string') ? req : req.params.id\n\n    return new Promise( async (resolve, reject) => {\n\n      var revision = await Model.prototype.getById.call(this, id)\n\n      if(!revision.id) {\n        logger.error('Could not get revision', id)\n        return reject(revisions)\n      }\n\n      this.resolveFields(revision)\n        .then( (revision) => {\n          resolve(revision)\n        })\n        .catch( (err) => {\n          logger.error('Could not resolve fields for revision', err)\n        })\n\n    })\n\n  }\n\n  getFieldReference(ref) {\n    return new Promise( (resolve, reject) => {\n\n      r.db(process.env.RETHINK_DB_NAME).table(ref.node.replace('-', '_')).get(ref.id).run()\n        .then( (res) => {\n          resolve(res)\n        })\n        .catch( (err) => {\n          console.error('Could not get field reference', err)\n          reject(err)\n        })\n\n    })\n  }\n\n  getFieldReferences(field) {\n    var resolvedRefs = 0\n\n    return new Promise( (resolve, reject) => {\n\n      if(!field.__refs) {\n        return resolve(field)\n      }\n\n      field.__refs.forEach( (ref) => {\n        this.getFieldReference(ref)\n          .then( (res) => {\n\n            switch(ref.node) {\n              case 'digital-asset':\n\n                var da   = new DigitalAsset(),\n                    pkgd = da.pkg(res)\n\n                Object.assign(field, {\n                  body: {\n                    mimetype: pkgd.mimetype,\n                    src: pkgd.src\n                  }\n                })\n\n                break\n\n              /*\n              TODO:\n              Not quite sure what to do here\n              */\n              default:\n                var re = Object.assign({}, res)\n                delete re.id\n\n                Object.assign(field, {\n                  body: re\n                })\n            }\n\n            resolvedRefs++\n\n            if(field.__refs.length == resolvedRefs) {\n              resolve(field)\n            }\n          })\n          .catch( (err) => {\n            logger.error('Could not handle field references', err)\n            reject(err)\n          })\n\n      })\n\n    })\n  }\n\n  resolveFieldReferences(field, i) {\n\n    return new Promise( (resolve, reject) => {\n\n      var resolvedRefs = []\n      resolvedFields.push(this.getFieldReferences(field))\n\n      Promise\n        .all(resolvedFields)\n        .then( (fields) => {\n          resolve(fields[0])\n        })\n        .catch( (err) => {\n          logger.error('Error fetching revision field references', err)\n          reject(err)\n        })\n\n    })\n\n  }\n\n  resolveFields(revision) {\n\n    return new Promise( (resolve, reject) => {\n\n      var fieldsResolved = []\n\n      if(revision.fields) {\n        revision.fields.forEach( (field, i) => {\n          fieldsResolved.push(this.resolveFieldRefences(field, i))\n        })\n\n        Promise\n          .all(fieldsResolved)\n          .then( (fields) => {\n            Object.assign(revision, {\n              fields\n            })\n\n            resolve(revision)\n          })\n          .catch( (err) => {\n            reject(err)\n          })\n      }\n      else {\n        resolve(revision)\n      }\n\n    })\n\n  }\n\n}\n\nexport default RevisionModel\n"]}