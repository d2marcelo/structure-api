{"version":3,"sources":["../../../src/models/channel/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;;;IAEM,Y;;;AAEJ,0BAA0B;AAAA,QAAd,OAAc,yDAAJ,EAAI;AAAA;AAAA,iHAClB,sBAAc,EAAd,EAAkB;AACtB,YAAM,UADgB;;AAGtB,mBAAa;AACX,gBAAS,CAAC,OAAD,CADE;AAEX,gBAAS,CAAC,OAAD,CAFE;AAGX,cAAS,CAAC,cAAD,CAHE;AAIX,iBAAS,CAAC,OAAD,CAJE;AAKX,gBAAS,CAAC,OAAD;AALE,OAHS;AAUtB,iBAAW;AACT,mBAAW,CACT;AACE,gBAAM,SADR;AAEE,sBAAY,IAFd;AAGE,sBAAY,eAHd;AAIE,oBAAU;AAJZ,SADS,EAOT;AACE,gBAAM,cADR;AAEE,sBAAY,IAFd;AAGE,sBAAY,cAHd;AAIE,oBAAU;AAJZ,SAPS,CADF;AAeT,iBAAS,CACP;AACE,gBAAM,QADR;AAEE,sBAAY,IAFd;AAGE,sBAAY,SAHd;AAIE,oBAAU;AAJZ,SADO,EAOP;AACE,gBAAM,SADR;AAEE,sBAAY,IAFd;AAGE,sBAAY,iBAHd;AAIE,oBAAU;AAJZ,SAPO;AAfA,OAVW;AAwCtB,cAAQ;AACN,mBAAW;AACT,gBAAM;AADG,SADL;AAIN,cAAM;AACJ,gBAAM;AADF,SAJA;AAON,cAAM;AACJ,gBAAM;AADF,SAPA;AAUN,cAAM;AACJ,gBAAM;AADF,SAVA;AAaN,eAAO;AACL,gBAAM;AADD;AAbD;AAxCc,KAAlB,EAyDH,OAzDG,CADkB;AA2DzB;;;;2BAEM,G,EAAK;AAAA;;AACV,UAAI,QAAQ,IAAI,KAAhB;;AAEA,aAAO;AAAA,6EAAa,iBAAO,OAAP,EAAgB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAb;AAAA;AAAA;AAAA;AAAA,UAAP;AAKD;;;;;kBAIY,Y","file":"index.js","sourcesContent":["import {chalk, logger} from '../../lib/logger'\nimport Model           from '../root'\nimport r               from '../../lib/database/driver'\n\nclass ChannelModel extends Model {\n\n  constructor(options = {}) {\n    super(Object.assign({}, {\n      name: 'channels',\n\n      permissions: {\n        create:  ['admin'],\n        delete:  ['admin'],\n        read:    ['organization'],\n        replace: ['admin'],\n        update:  ['admin'],\n      },\n      relations: {\n        belongsTo: [\n          {\n            Node: 'Channel',\n            foreignKey: 'id',\n            localField: 'channelParent',\n            localKey: 'channelParentId'\n          },\n          {\n            Node: 'Organization',\n            foreignKey: 'id',\n            localField: 'organization',\n            localKey: 'organizationId'\n          }\n        ],\n        hasMany: [\n          {\n            Node: 'Bucket',\n            foreignKey: 'id',\n            localField: 'buckets',\n            localKey: 'bucketIds'\n          },\n          {\n            Node: 'Channel',\n            foreignKey: 'id',\n            localField: 'channelChildren',\n            localKey: 'channelChildrenIds'\n          },\n        ]\n      },\n      schema: {\n        bucketIds: {\n          type: 'array'\n        },\n        data: {\n          type: 'object'\n        },\n        desc: {\n          type: 'string'\n        },\n        slug: {\n          type: 'string'\n        },\n        title: {\n          type: 'string'\n        }\n      }\n    }, options))\n  }\n\n  getAll(req) {\n    var query = req.query\n\n    return new Promise( async (resolve, reject) => {\n\n\n\n    })\n  }\n\n}\n\nexport default ChannelModel\n"]}