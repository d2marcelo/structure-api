{"version":3,"sources":["../../../src/models/document/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import {chalk, logger}  from '../../lib/logger'\nimport DocumentRevision from '../document-revision'\nimport Model            from '../root'\nimport r                from '../../lib/database/driver'\n\n//import config from '../../config'\n\nclass DocumentModel extends Model {\n\n  constructor(options = {}) {\n    super(Object.assign({}, {\n      name: 'documents',\n\n      permissions: {\n        create:  ['user'],\n        delete:  ['admin'],\n        read:    ['organization'],\n        replace: ['admin'],\n        update:  ['user'],\n      },\n      relations: {\n        belongsTo: [\n          {\n            Node: 'Organization',\n            foreignKey: 'id',\n            localField: 'organization',\n            localKey: 'organizationId'\n          },\n          {\n            Node: 'Template',\n            foreignKey: 'id',\n            localField: 'template',\n            localKey: 'templateId'\n          },\n          {\n            Node: 'User',\n            foreignKey: 'id',\n            localField: 'user',\n            localKey: 'userId'\n          }\n        ],\n        hasMany: [\n          {\n            Node: 'Taxonomy',\n            foreignKey: 'id',\n            localField: 'taxonomys',\n            localKey: 'taxonomysId'\n          },\n        ]\n      },\n      schema: {\n        activeRevisionId: {\n          type: 'string'\n        },\n        desc: {\n          type: 'string'\n        },\n        revisionIds: {\n          type: 'array'\n        },\n        title: {\n          type: 'string'\n        }\n      }\n    }, options))\n  }\n\n  create(req) {\n    if(!req.body.fields) return Model.prototype.getById.apply(this, arguments)\n\n    /*\n    NOTE:\n    When a template is created with fields, we need to take those fields and place them on a revision\n    */\n\n    var fields = req.body.fields.slice(0)\n    delete req.body.fields\n\n    return new Promise( async (resolve, reject) => {\n      // Create document\n      var doc = await Model.prototype.create.call(this, req)\n\n      // Create revision\n\n      var revision = await new DocumentRevision().create({\n        body: {\n          documentId: 2,\n          fields\n        }\n      })\n\n      // Associate document with revision\n      var update = await this.update({\n        body: {\n          activeRevisionId: revision.id,\n          revisionIds: [revision.id]\n        },\n        params: {\n          id: doc.id\n        }\n      })\n\n      // Get document with first revision\n      var docFinalized = await this.getById({\n        params: {\n          id: doc.id\n        }\n      })\n\n      resolve(docFinalized)\n    })\n  }\n\n  getAll() {\n    return new Promise( async (resolve, reject) => {\n\n      var docs = await Model.prototype.getAll.call(this),\n          docsResolved = []\n\n      docs.forEach( (doc) => {\n        docsResolved.push(this.getActiveRevision(doc).then( (revision) => {\n          return Object.assign(doc, {\n            fields: revision.fields,\n            title: revision.title\n          })\n        }))\n      })\n\n      Promise.all(docsResolved)\n        .then( (docs) => {\n          resolve(docs)\n        })\n\n    })\n  }\n\n  getById(req) {\n    var id = (typeof req == 'string') ? req : req.params.id\n\n    return new Promise( async (resolve, reject) => {\n\n      var doc = await Model.prototype.getById.call(this, id)\n\n      if(!doc.id) {\n        logger.error('Could not get document', id)\n        return reject(doc)\n      }\n\n      var revision = await this.getActiveRevision(doc)\n\n      Object.assign(doc, {\n        fields: revision.fields,\n        title: revision.title\n      })\n\n      return resolve(doc)\n\n    })\n\n  }\n\n  /*\n  NOTE:\n  Revisions are created on save, not doc creation, which means they aren't guaranteed exist after initial creation.\n  The create method has been recently modified to add a revision if the `fields` property is passed\n  */\n  getActiveRevision(doc) {\n\n    return new Promise( async (resolve, reject) => {\n\n      if(!doc.activeRevisionId) return resolve({\n        fields: [],\n        title: doc.title\n      })\n\n      var revision = await new DocumentRevision().getById(doc.activeRevisionId)\n\n      if(!revision.id) {\n        logger.error('Could not get document revision for', doc.id)\n        return reject(revision)\n      }\n\n      resolve(revision)\n\n    })\n\n  }\n\n}\n\nexport default DocumentModel\n"]}