{"version":3,"sources":["../../../src/models/user/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;IAEM,S;;;AAEJ,uBAA0B;AAAA,QAAd,OAAc,yDAAJ,EAAI;AAAA;AAAA,8GAClB,sBAAc,EAAd,EAAkB;AACtB,YAAM,OADgB;;AAGtB,eAAS;AACP,gBAAQ;AADD,OAHa;AAQtB,mBAAa;AACX,gBAAS,CAAC,OAAD,CADE;AAEX,gBAAS,CAAC,OAAD,CAFE;AAGX,cAAS,CAAC,cAAD,CAHE;AAIX,iBAAS,CAAC,OAAD,CAJE;AAKX,gBAAS,CAAC,MAAD,EAAS,OAAT;AALE,OARS;AAetB,iBAAW;AACT,mBAAW,CACT;AACE,gBAAM,cADR;AAEE,sBAAY,IAFd;AAGE,sBAAY,cAHd;AAIE,oBAAU;AAJZ,SADS;AADF,OAfW;AAyBtB,cAAQ;AACN,eAAO;AACL,gBAAM;AADD,SADD;AAIN,kBAAU;AACR,gBAAM;AADE;AAJJ;AAzBc,KAAlB,EAiCH,OAjCG,CADkB;AAmCzB;;;;2BAEM,G,EAAK;AAAA;;AACV,UAAI,MAAM,IAAI,IAAd;;AAEA,aAAO;AAAA,6EAAa,iBAAO,OAAP,EAAgB,MAAhB;AAAA,cAKd,GALc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAED,yBAAsB,KAAtB,CAA4B,IAAI,QAAhC,CAFC;;AAAA;AAElB,sBAAI,IAFc;;AAGlB,yBAAO,IAAI,QAAX;;AAHkB;AAAA,yBAKF,eAAM,SAAN,CAAgB,MAAhB,CAAuB,IAAvB,SAAkC,EAAC,MAAM,GAAP,EAAlC,CALE;;AAAA;AAKd,qBALc;;AAAA,sBAOd,IAAI,EAPU;AAAA;AAAA;AAAA;;AAAA,mDAOC,OAAO,GAAP,CAPD;;AAAA;;AASlB,0BAAQ,GAAR;;AATkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAb;AAAA;AAAA;AAAA;AAAA,WAYN,KAZM,CAYC,UAAC,GAAD,EAAS;AACf,gBAAQ,KAAR,CAAc,UAAd,EAA0B,GAA1B;AACD,OAdM,CAAP;AAgBD;;;+BAEU,K,EAAO;AAChB,aAAO,iBAAE,EAAF,CAAK,QAAQ,GAAR,CAAY,eAAjB,EAAkC,KAAlC,CAAwC,KAAK,KAA7C,EAAoD,MAApD,CAA2D,EAAC,YAAD,EAA3D,EAAoE,KAApE,CAA0E,CAA1E,CAAP;AACD;;;kCAEa,Q,EAAU;AAAA;;AACtB,aAAO;AAAA,6EAAa,kBAAO,OAAP,EAAgB,MAAhB;AAAA,cACd,IADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACD,OAAO,CAAP,CAAS,EAAT,CAAY,QAAQ,GAAR,CAAY,eAAxB,EAAyC,KAAzC,CAA+C,OAA/C,EAAwD,MAAxD,CAA+D,EAAC,kBAAD,EAA/D,EAA2E,KAA3E,CAAiF,CAAjF,CADC;;AAAA;AACd,sBADc;;AAAA,sBAGd,IAHc;AAAA;AAAA;AAAA;;AAAA,oDAGD,OAAO,IAAP,CAHC;;AAAA;;AAKlB,0BAAQ,KAAK,CAAL,CAAR;;AALkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAb;AAAA;AAAA;AAAA;AAAA,UAAP;AAOD;;;;;kBAIY,S","file":"index.js","sourcesContent":["import {chalk, logger} from '../../lib/logger'\nimport Model           from '../root'\nimport PasswordService from '../../services/password'\nimport r               from '../../lib/database/driver'\n\nclass UserModel extends Model {\n\n  constructor(options = {}) {\n    super(Object.assign({}, {\n      name: 'users',\n\n      mapping: {\n        fields: {\n\n        }\n      },\n      permissions: {\n        create:  ['admin'],\n        delete:  ['admin'],\n        read:    ['organization'],\n        replace: ['admin'],\n        update:  ['self', 'admin'],\n      },\n      relations: {\n        belongsTo: [\n          {\n            Node: 'Organization',\n            foreignKey: 'id',\n            localField: 'organization',\n            localKey: 'organizationId'\n          }\n        ]\n      },\n      schema: {\n        email: {\n          type: 'string'\n        },\n        username: {\n          type: 'string'\n        }\n      }\n    }, options))\n  }\n\n  create(req) {\n    var pkg = req.body\n\n    return new Promise( async (resolve, reject) => {\n\n      pkg.hash = await new PasswordService().issue(pkg.password)\n      delete pkg.password\n\n      var doc = await Model.prototype.create.call(this, {body: pkg})\n\n      if(!doc.id) return reject(doc)\n\n      resolve(doc)\n\n    })\n    .catch( (err) => {\n      console.error('hello???', err)\n    })\n\n  }\n\n  getByEmail(email) {\n    return r.db(process.env.RETHINK_DB_NAME).table(this.table).filter({email}).limit(1)\n  }\n\n  getByUsername(username) {\n    return new Promise( async (resolve, reject) => {\n      var user = await thinky.r.db(process.env.RETHINK_DB_NAME).table('users').filter({username}).limit(1)\n\n      if(!user) return reject(user)\n\n      resolve(user[0])\n    })\n  }\n\n}\n\nexport default UserModel\n"]}