{"version":3,"sources":["../../src/models/root.js"],"names":[],"mappings":"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","file":"root.js","sourcesContent":["import {chalk, logger} from '../lib/logger'\nimport ShortId         from '../services/short-id'\nimport r               from '../lib/database/driver'\nimport uuid            from '../lib/utils/uuid'\n\nclass RootNode {\n\n  constructor(options = {}) {\n    this.defaults = {}\n\n    this.permissions = {\n      create:  ['admin'],\n      delete:  ['admin'],\n      read:    ['public'],\n      replace: ['admin'],\n      update:  ['admin'],\n    }\n\n    Object.assign(this, options)\n    if(!this.name) {\n      throw new Error('model.name must be defined')\n    }\n    if(!this.table) this.table = this.name\n\n    /*\n    Map to Thinky Schema requirements\n    */\n    var schema = {}\n    if(this.schema) {\n      /*Object.keys(this.schema).forEach( (key) => {\n        switch(this.schema[key].type) {\n          case 'date':\n\n            schema[key] = Date\n\n            break\n\n          case 'object':\n\n            schema[key] = Object\n\n            break\n\n          case 'string':\n\n            schema[key] = String\n\n            break\n\n          default:\n            //console.error('what is o', o)\n        }\n      })*/\n    }\n\n  }\n\n  create(pkg = {}, options = {}) {\n\n    var insertOptions = {\n      returnChanges: options.returnChanges || true\n    }\n\n    pkg.createdAt  = r.now()\n    pkg.id         = pkg.id || uuid()\n    pkg.sid        = new ShortId().issue(pkg.id)\n    pkg.updatedAt  = r.now()\n    pkg.__version  = process.env.npm_package_version\n\n    return new Promise( async (resolve, reject) => {\n\n      try {\n\n        var res = await r.table(options.table || this.table).insert(pkg, insertOptions)\n        if(res.errors && res.errors > 0) {\n          throw new Error(res.first_error)\n        }\n\n        var doc = res.changes[0].new_val\n\n        //logger.debug('Document created', doc)\n        if(pkg.__refs && pkg.__refs.length > 0) {\n\n          var refs = []\n          pkg.__refs.forEach( (ref) => {\n            refs.push(this.referenceTo('belongsTo', doc.id, ref))\n          })\n\n          return Promise\n            .all(refs)\n            .then( () => {\n              resolve(doc)\n            })\n            .catch(reject)\n        }\n\n        else {\n          return resolve(doc)\n        }\n      }\n      catch(err) {\n        logger.error('Could not create')\n        console.error(err)\n        throw err\n      }\n\n    })\n  }\n\n  delete(id) {\n    return Promise.resolve()\n  }\n\n  getById(id) {\n\n    // Short ID\n    if(id.length <= 10) {\n\n      return new Promise( async (resolve, reject) => {\n\n        try {\n          var doc = await r.table(this.table).filter({sid: id}).limit(1)\n          return resolve(this.getById(doc[0].id))\n        }\n        catch(err) {\n          logger.error('Could not get by id')\n          console.error(err.stack)\n          throw err\n        }\n\n      })\n    }\n\n    // Long ID\n    else {\n      return r.table(this.table).get(id)\n    }\n\n  }\n\n  /*\n  TODO: need more pagination logic\n  */\n  getAll() {\n    return r.table(this.table).orderBy(r.desc('updatedAt')).limit(10)\n  }\n\n  getRelations(type) {\n    var relations = []\n\n    Object.keys(this.relations).forEach( (relation) => {\n\n      if(relation == type) {\n        relations = this.relations[relation]\n      }\n\n    })\n\n    return relations\n  }\n\n  referenceTo(type, id, reference) {\n\n    return new Promise( (resolve, reject) => {\n      var inserts = []\n\n      Object.keys(reference).forEach( async (key) => {\n        var referencePkg = {}\n        referencePkg[`${this.name}Id`] = id // local key\n        referencePkg[key] = reference[key]  // foreign key\n\n        switch(type) {\n          case 'belongsTo':\n            //referencePkg.name = `${key.replace('Id', '')}_has_${this.name}`\n            referencePkg.type = 'belongsTo'\n\n            break\n        }\n\n        referencePkg.node = this.name\n\n        inserts.push(this.insertReference(referencePkg))\n      })\n\n      Promise\n        .all(inserts)\n        .then(resolve)\n        .catch(reject)\n\n    })\n\n  }\n\n  insertReference(pkg = {}) {\n    return r.table('refs').insert(pkg)\n  }\n\n  update(id, pkg = {}, options = {}) {\n\n    pkg.__version  = process.env.npm_package_version\n\n    options.returnChanges = options.returnChanges || true\n\n    return new Promise( async (resolve, reject) => {\n\n      try {\n        var res = await this.getById(id).update(pkg, options)\n        return resolve(res.changes[0].new_val)\n      }\n      catch(err) {\n        logger.error('Error updating')\n        console.error(err.stack)\n        throw err\n      }\n\n    })\n  }\n\n}\n\nexport default RootNode\n"]}